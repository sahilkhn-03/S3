bash
#include <sys/stat.h>
#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd, fd2;
    char wbuf[128];
    char rbuf[128];

    // Open file for reading and writing
    fd = open("file.txt", O_RDWR | O_CREAT, S_IRWXU);
    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }

    // Write input to the file
    printf("Enter the text to be written:\n");
    scanf("%s", wbuf);
    write(fd, wbuf, strlen(wbuf));

    close(fd); // Close the file

    // Reopen the file and read its content
    fd2 = open("file.txt", O_RDWR);
    if (fd2 == -1) {
        perror("Error reopening file");
        return 1;
    }
    printf("\nThe Contents are:\n");
    read(fd2, rbuf, 100);
    printf("%s\n", rbuf);

    close(fd2); // Close the file
    return 0;
}
#include <sys/types.h>
#include <stdio.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *ptr2;
    char dir_name[50];

    printf("Enter the Directory: ");
    scanf("%s", dir_name);

    // Open the directory
    dir = opendir(dir_name);
    if (dir == NULL) {
        perror("Error opening directory");
        return 1;
    }

    // Read and print the directory contents
    while ((ptr2 = readdir(dir)) != NULL) {
        printf("%ld\t%s\n", ptr2->d_ino, ptr2->d_name);
    }

    closedir(dir); // Close the directory
    return 0;
}
#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int status, pid, child_pid;

    pid = fork(); // Create a child process

    if (pid == -1) {
        printf("Child Process Creation Failed!\n");
        return 1;
    } else if (pid == 0) {
        // Inside the child process
        printf("Inside Child Process with process ID: %d\n", getpid());
        execlp("/bin/date", "date", NULL);
        perror("Error executing date command");
        return 1;
    } else {
        // Inside the parent process
        child_pid = wait(&status); // Wait for child process to complete
        printf("\nInside the parent process with ID: %d\n", getpid());
        printf("Child Process Created Successfully\n");
    }

    return 0;
}
